const NginxConfFile = require('nginx-conf').NginxConfFile;
const commandLineArgs = require('command-line-args');
const jsesc = require('jsesc');
const fs = require('fs');

const options = commandLineArgs([
  { name: 'confPath', alias: 'c', type: String, defaultValue: __dirname + '/nginx.conf'}, //path of nginx.conf file to be updated
  { name: 'dojoPath', alias: 'd', type: String, defaultValue: __dirname + '/index.html'}, //path of GUI template file to be updated
  { name: 'tempPath', alias: 't', type: String, defaultValue: '/temps'}, //nginx path for temps. i.e. freenas.local/temp
  { name: 'tempAlias', alias: 'a', type: String, defaultValue: '/mnt/Ocean0/Misc/temperature-monitoring'} //alias path that the temps images are in
]);

let needsUpdating = false;

try{
  //UI
  let data = fs.readFileSync(options.dojoPath);
  if(!data){
    console.error('Error loading GUI html');
    process.exit(2);
  } else {
    let uiTemplate = data.toString();
    let tempsRE = new RegExp('href: \'' + jsesc(options.tempPath) + '\',', 'g');

    if(uiTemplate.match(tempsRE)){
      console.log('Header already set in template');
    } else {
      console.log('Adding to UI Template');
      let outerDivRE = new RegExp(/^<\/div>/m);
      output = uiTemplate.replace(outerDivRE, `  <div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="title: '{% trans "Temperature" %}', href: '` + options.tempPath + `', refreshOnShow: true"></div>\n\n</div>\n`);
      fs.writeFileSync(options.dojoPath, output);
      needsUpdating = true;
    }
  }

  //NGINX
  NginxConfFile.create(options.confPath, function(err, conf){
    if(err){
      console.error('Error reading in conf file: ' + err);
      process.exit(2);
    }

    let needsLocation = true;
    let server = conf.nginx.http.server[0];
    if(server !== undefined){
      for(let i = 0; i < server.location.length; i++){
        let location = server.location[i];
        if(location._value === options.tempPath){
          console.log('Location already exists');
          conf.die(options.confPath);
          needsLocation = false;
          break;
        }
      }

      if(needsLocation){
        console.log('Adding location to Nginx')
        let locationIndex = server.location.length;
        server._add('location', options.tempPath);
        let location = server.location[locationIndex];
        location._add('alias', options.tempAlias);
        location._comments.push('Auto generated by injectTempGUI');

        conf.flush();
        needsUpdating = true;
      }
    }

    if(!needsUpdating){
      process.exit(1);
    }
  });
} catch(e){
  console.error('Exception caught: ' + e);
  process.exit(2);
}
